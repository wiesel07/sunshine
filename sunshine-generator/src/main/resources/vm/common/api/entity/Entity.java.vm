package ${packageName}.entity;

import java.io.Serializable;
import java.util.Date;
import java.math.BigDecimal;

import com.baomidou.mybatisplus.activerecord.Model;
import com.baomidou.mybatisplus.annotations.TableField;
import com.baomidou.mybatisplus.annotations.TableId;
import com.baomidou.mybatisplus.annotations.TableLogic;
import com.baomidou.mybatisplus.annotations.TableName;
import com.baomidou.mybatisplus.enums.FieldFill;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;


 /**
 * <p>
 *  ${tableComment}
 * </p>
 *
 * @author ${author}
 * @since ${createDate}
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper=false)
@Accessors(chain = true)
@TableName("${tableName}")
@ApiModel("${comments}")
public class  ${capitalEntityName} extends Model<${capitalEntityName}> {

    private static final long serialVersionUID = 1L; 
 
#foreach ($tableField in $tableFields)
	#if($tableField.columnName=='CREATE_TIME' || $tableField.columnName=='MODIFY_TIME' || $tableField.columnName=='DEL_FLAG' || $tableField.columnName=='del_flag' )
    
    @ApiModelProperty(value ="$tableField.comments",hidden=true)
    #else
    
    @ApiModelProperty(value ="$tableField.comments")
    #end
    #if($tableField.propertyName==$pk.propertyName)
    @TableId(value = "$tableField.columnName")
    private $tableField.propertyType $tableField.propertyName;
	#elseif($tableField.columnName=='CREATE_TIME')
	@TableField(value = "$tableField.columnName", fill = FieldFill.INSERT)
    private Date createTime;
	#elseif($tableField.columnName=='MODIFY_TIME')
	@TableField(value = "$tableField.columnName", fill = FieldFill.INSERT_UPDATE)
    private Date modifyTime;
    #elseif($tableField.columnName=='DEL_FLAG')
    @TableField("$tableField.columnName")
    @TableLogic
    private $tableField.propertyType $tableField.propertyName;
    #else
    private $tableField.propertyType $tableField.propertyName;
	#end
#end
    
#foreach ($tableField in $tableFields)
    public static final String $tableField.columnName = "$tableField.columnName";
#end

    @Override
	protected Serializable pkVal() {
		return this.${pk.propertyName};
	}
}
