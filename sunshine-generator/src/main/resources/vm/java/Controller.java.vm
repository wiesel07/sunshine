package ${packageName}.controller;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wiesel.common.enums.ErrorCode;

import com.wiesel#if(${moduleName}!='' ).${moduleName}#end.controller.req.${reqEntityName};

import ${packageName}.entity.${entityName};
import ${packageName}.service.${serviceName};
import cn.hutool.core.bean.BeanUtil;
import io.swagger.annotations.ApiOperation;
import springfox.documentation.annotations.ApiIgnore;
import wiesel.common.api.ApiResult;
import wiesel.common.base.entity.PageReq;
import wiesel.common.base.entity.PageResp;

/**
 *
 * @ClassName 类名：${serviceImplName}
 * @Description 功能说明： ${comments}
 *              <p>
 *              TODO
 *              </p>
 ***********************************************************************
 * @date 创建日期：${datetime}
 * @author 创建人：${author}
 * @version 版本号：V1.0
 *          <p>
 ****************************修订记录************************************
 * 
 *          ${datetime} ${author} 创建该类功能。
 *
 ***********************************************************************
 *          </p>
 */
@Controller
@RequestMapping("#if(${moduleName}!='' )/${moduleName}#end/${classname}")
public class ${controllerName} {

	private String prefix = "#if(${moduleName}!='' )${moduleName}#end/${classname}";

	@Autowired
	private ${serviceName} ${IServiceImpl};

	@ApiIgnore
	@GetMapping()
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:${classname}")
	String ${classname}() {
		return prefix + "/${classname}";
	}

	@ApiOperation(value = "获取列表", notes = "")
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:${classname}")
	ApiResult<PageResp<${entityName}>> list(PageReq<${entityName}> pageReq) {

		Page<${entityName}> page = new Page<${entityName}>(pageReq.getPageNo(), pageReq.getPageSize());
		EntityWrapper<${entityName}> wrapper = new EntityWrapper<>();

		page = ${IServiceImpl}.selectPage(page, wrapper);

		PageResp<${entityName}> pageResp = new PageResp<${entityName}>();
		pageResp.setRows(page.getRecords());
		pageResp.setTotal(page.getTotal());
		return ApiResult.ok(pageResp);
	}

	@ApiOperation(value = "新增")
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:add")
	@GetMapping("/add")
	String add() {
		return prefix + "/add";
	}

	@ApiOperation(value = "编辑")
	@GetMapping("/edit/{${pk.attrname}}")
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:edit")
	String edit(@PathVariable("${pk.attrname}") String ${pk.attrname}, Model model) {
		${entityName} ${classname} = ${IServiceImpl}.selectById(Long.valueOf(${pk.attrname}));
		model.addAttribute("${classname}", ${classname});

		return prefix + "/edit";
	}


	@ApiOperation(value = "保存")
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:add")
	public ApiResult<String> save(${reqEntityName} ${reqEntityname}) {
		${entityName} ${classname}= new ${entityName}();
		BeanUtil.copyProperties(${reqEntityname}, ${classname});
		${IServiceImpl}.insert(${classname});
		return ApiResult.ok();
	}


	@ApiOperation(value = "修改")
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:edit")
	public ApiResult<String> update(${reqEntityName} ${reqEntityname}) {
		${entityName} ${classname}= new ${entityName}();
		BeanUtil.copyProperties(${reqEntityname}, ${classname});
		${IServiceImpl}.updateById(${classname});

		return ApiResult.ok();
	}

	@ApiOperation(value = "删除")
	@PostMapping("/delete")
	@ResponseBody
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:delete")
	public  ApiResult<String> delete(String ${pk.attrname}) {
		if (StringUtils.isEmpty(${pk.attrname})) {
			return ApiResult.error(ErrorCode.PARAM_IS_NULL);
		}
		${IServiceImpl}.deleteById(Long.valueOf(${pk.attrname}));
		return ApiResult.ok();
	}


	@ApiOperation(value = "批量删除")
	@PostMapping("/batchDelete")
	@ResponseBody
	@RequiresPermissions("#if(${moduleName}!='' )${moduleName}:#end${classname}:batchDelete")
	public  ApiResult<String> batchDelete(String[] ${pk.attrname}s) {
		if (${pk.attrname}s==null||${pk.attrname}s.length <= 0) {
			return ApiResult.error(ErrorCode.PARAM_IS_NULL);
		}
		List<Long> delIds = new ArrayList<>();
		for (String ${pk.attrname} : ${pk.attrname}s) {
			delIds.add(Long.valueOf(${pk.attrname}));
		}

		${IServiceImpl}.deleteBatchIds(delIds);

		return ApiResult.ok();
	}
}
